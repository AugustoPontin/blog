<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Temporizador de telas no Protheus</title>
    <url>/blog/Protheus/Temporizador-de-telas-no-Protheus/</url>
    <content><![CDATA[<p>Imagine a situação em que é necessário apresentar uma informação para o usuário e essa informação tem que ser fechada automaticamente após X tempo, por exemplo em processos dentro de um controle de transação, onde se o usuário demorar para clicar em fechar a transação ficará travada e bloqueará outros usuários.</p>
<a id="more"></a>

<p>Irei demonstrar abaixo como garantir que a tela/mensagem seja fechada em 10 segundos (você pode configurar o tempo) e ainda demonstrando para o usuário segundo a segundo quanto tempo falta para o fechamento automático.</p>
<p>O resultado final será esse:<br><img src="/blog/images/temporizador_1.png" alt="Timer ADVPL" title="Temporizador ADVPL"></p>
<p>O <strong>timer</strong> no “Fechamento automático em:” será atualizado segundo a segundo até chegar em 0 e fechar a mensagem automaticamente.</p>
<p>Essa solução resolveu, por exemplo, um enorme problema no balcão de vendas em que um vendedor bloqueava todos os outros deixando essa tela aberta enquanto encaminhava os produtos para a expedição.</p>
<p><strong>Mão na Massa</strong></p>
<p>No código abaixo estou criando uma dialog (tela) para informar ao usuário o número do DAV, igual na imagem acima.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User Function PONTIN001()</span><br><span class="line"></span><br><span class="line">  Local cNumDav   :&#x3D; &quot;0000042025&quot;</span><br><span class="line"></span><br><span class="line">  Private nStop   :&#x3D; 0</span><br><span class="line">  Private nTempo  :&#x3D; 10</span><br><span class="line">  Private nLimite :&#x3D; nTempo</span><br><span class="line"></span><br><span class="line">  DEFINE MSDIALOG oDlg1 TITLE &quot;augustopontin.github.io&#x2F;blog&quot; FROM 000, 000  TO 160, 365 COLORS 0, 16777215 PIXEL</span><br><span class="line"></span><br><span class="line">  oFontTit :&#x3D; TFont():New( &quot;Cooper Black&quot;, 0, -19,, .F., 0,, 400, .F. ,.F. ,,,,,, )</span><br><span class="line">  oFontDav :&#x3D; TFont():New( &quot;Cooper Black&quot;, 0, -32,, .F., 0,, 400, .F., .F.,,,,,, )</span><br><span class="line">  oGrp1    :&#x3D; TGroup():New( 004, 004, 055, 180, &quot;&quot;, oDlg1, CLR_BLACK, CLR_WHITE, .T., .F. )</span><br><span class="line">  oSay1 :&#x3D; TSay():New( 012, 050,&#123;||&quot;CÓDIGO DO DAV&quot;&#125;, oGrp1,, oFontTit, .F., .F., .F., .T., CLR_BLUE, CLR_WHITE, 092, 012)</span><br><span class="line">  oSay2 :&#x3D; TSay():New( 026,045,&#123;||cNumDav&#125;, oGrp1,, oFontDav, .F., .F., .F., .T., CLR_HRED, CLR_WHITE, 100, 026)</span><br><span class="line">  oSay3 :&#x3D; TSay():New( 045, 050, &#123;||&quot;FECHAMENTO AUTOMATICO EM: &quot;&#125;, oDlg1,,, .F., .F., .F., .T., CLR_BLUE, CLR_WHITE, 092, 012)</span><br><span class="line">  oSay4 :&#x3D; TSay():New( 045,145,&#123;||cValToChar(nTempo)&#125;, oDlg1,,, .F., .F., .F., .T., CLR_HRED, CLR_WHITE, 100, 026)</span><br><span class="line">  oBtn1 :&#x3D; TButton():New( 060, 066,&quot;OK&quot;,oDlg1,&#123;||oDlg1:End()&#125;, 056, 016,,,, .T.,,&quot;&quot;,,,, .F. )</span><br><span class="line"></span><br><span class="line">  nMilissegundos :&#x3D; 1000 &#x2F;&#x2F; Disparo será de 1 em 1 segundos</span><br><span class="line">  oTimer :&#x3D; TTimer():New(nMilissegundos, &#123;||  IIf(nStop&lt;&gt;nLimite, Tempo(), oDlg1:End()) &#125;, oDlg1 )</span><br><span class="line">  oTimer:Activate()</span><br><span class="line"></span><br><span class="line">  oDlg1:Activate(,,,.T.)</span><br><span class="line"></span><br><span class="line">Return</span><br></pre></td></tr></table></figure>

<p>O segredo está na função <strong>TTimer</strong>, ela irá disparar o bloco de códigos <em>“{|| IIf(nStop&lt;&gt;10,Tempo(),oDlg1:End()) }”</em> a cada 1000 milissegundos (1 segundo).</p>
<p>Em seguida, criamos uma Static Function com nome de <strong>Tempo()</strong> para atualizar a variável de controle dos segundos.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Static Function Tempo()</span><br><span class="line"></span><br><span class="line">  nTempo :&#x3D; nLimite - nStop</span><br><span class="line"></span><br><span class="line">  oSay4:Refresh()</span><br><span class="line"></span><br><span class="line">  nStop++</span><br><span class="line"></span><br><span class="line">Return</span><br></pre></td></tr></table></figure>

<p>Essa função é responsável por atualizar a variável de controle de parada <em>nStop</em> e atualizar a variável que demonstra segundo a segundo para o usuário quanto falta para fechar a tela <em>nTempo</em>.<br>E claro, antes de sair da função é realizado um refresh no objeto TSay <em>oSay4</em>.</p>
<p>Está ai, algo bem simples, porém interessante e com muita aplicação !!</p>
]]></content>
      <categories>
        <category>Protheus</category>
      </categories>
      <tags>
        <tag>ADVPL</tag>
      </tags>
  </entry>
  <entry>
    <title>DBAccess Distribuído</title>
    <url>/blog/Protheus/DBAccess-Distribuido/</url>
    <content><![CDATA[<p>Várias empresas utilizam o balanceamento de carga nos serviços (AppServer) para que consigam ter uma melhor administração e estabilidade no ERP, fazendo assim a distribuição dos acessos ao Protheus em diversos serviços que podem estar configurados em servidores na rede ou tudo em apenas um servidor.</p>
<p>Você sabia que é possível realizar a distrubuição das conexões em diversos DBAccess? logo abaixo explicamos como fazer a configuração correta do balanceamento e como desfrutar dessa funcionalidade que pode ajudar em muito no desempenho do seu ERP.</p>
<a id="more"></a>

<p>Poucos sabem da possibilidade de realizar o balanceamento do DBAccess (topconnect para os mais antigos) ou como configura-lo da melhor maneira.</p>
<p><strong>Estudo de caso:</strong> Sabendo que nesse mundo tecnológico nem tudo sai conforme o combinado, me deparei com um ambiente em que o DBAccess estava recebendo mais de 1.000 acessos simultâneos e não estava dando conta de responder a todos de forma satisfatória, ocasionando bloqueios de acesso e queda de performance.</p>
<p>E agora José? Vamos ver abaixo mais detalhes sobre o balanceamento de carga no DBAccess e como configurá-lo:</p>
<p>Um <strong>detalhe importante</strong> é que o DBAccess que recebe a função de MASTER não é responsável por fazer a distribuição da carga ou das conexões como acontece no balanceamento do appserver. Deste modo, cada serviço do AppServer deve ser explicitamente configurado para se conectar a um DBAccess SLAVE e esse por sua vez é configurado para se conectar ao DBAccess MASTER que vai realizar os controles de LOCK (bloqueios para evitar acesso simultâneo aos registros em alteração) e de licenças de uso do ERP.</p>
<p><strong>Mão na Massa</strong></p>
<p>Usando como exemplo um ambiente com 3 servidores, nomeados SRVDB, SRVAPP1 e SRVAPP2, onde o servidor de banco de dados possui o DBAccess MASTER e os servidores SRVAPP1 e SRVAPP2 possuem cada um 2 serviços do AppServer configurados para se conectar ao DBAccess SLAVE em seus próprios servidores.</p>
<p>A imagem abaixo ilustra o cenário estudado</p>
<p><img src="/blog/images/dbaccess_1.png" alt="dbAcces Distribuído" title="dbAcces Distribuído"></p>
<p>Vamos seguindo passo a passo:</p>
<ul>
<li>Instale um DBAccess em cada servidor que contém o AppServer (SRVAPP1 e SRVAPP2)</li>
<li>Configure o ODBC nos servidores SRVAPP1 e SRVAPP2 para conectar no banco de dados do SRVDB</li>
<li>Configure cada DBAccess nos servidores SRVAPP1 e SRVAPP2 para o modo de acesso SLAVE</li>
</ul>
<p><em>dbAccess.ini</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[General]</span><br><span class="line">Mode&#x3D;SLAVE</span><br><span class="line">MasterServer&#x3D;SRVDB</span><br><span class="line">MasterPort&#x3D;7890 ;;Informa a porta do DBAccess configurada no SRVDB</span><br></pre></td></tr></table></figure>

<p>Feito isso em todos os servidores de aplicação, agora devemos configurar o DBAccess MASTER que ficará no SRVDB:</p>
<p><em>dbAccess.ini</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[General]</span><br><span class="line">Mode&#x3D;MASTER</span><br></pre></td></tr></table></figure>

<blockquote>
<p>O License Server deve ser configurado apenas no DBAccess MASTER</p>
</blockquote>
<p>Vamos testar?</p>
<ul>
<li>Inicie o DBAccess no servidor SRVDB</li>
<li>Inicie o DBAccess nos servidores de aplicação (SRVAPP1 e SRVAPP2)</li>
<li>Teste as conexões de cada um dos DBAccess usando o DBMonitor</li>
<li>Altere os arquivos de configuração (appserver.ini) dos servidores SRVAPP1 e SRVAPP2 para se conectar ao DBAccess SLAVE do próprio servidor</li>
</ul>
<p>Exemplo da configuração no appserver.ini do “AppServer Slave01” do nosso cenário:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DBAccess]</span><br><span class="line">DataBase&#x3D;MSSQL</span><br><span class="line">Server&#x3D;SRVAPP1</span><br><span class="line">Port&#x3D;7890</span><br><span class="line">Alias&#x3D;P12</span><br></pre></td></tr></table></figure>

<p><strong>Características do DBAccess com balanceamento de carga</strong></p>
<p>Um DBAccess SLAVE somente consegue estabelecer conexão com o banco de dados se conseguir conectar primeiro com o DBAccess MASTER.</p>
<p>O DBMonitor somente tem acesso às informações e conexões processadas naquele serviço. Logo, para localizar uma conexão no ambiente mencionado deve-se abrir um DBMonitor para cada DBAccess SLAVE.</p>
<p>O DBAccess com balanceamento e controle de licenças centralizado no MASTER depende da build com release igual ou superior a 20170202.</p>
]]></content>
      <categories>
        <category>Protheus</category>
      </categories>
      <tags>
        <tag>DBACCESS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/Programacao/hello-world/</url>
    <content><![CDATA[<p>Sempre começamos algo novo na programação com um Hello World, aqui não poderia ser diferente!</p>
<p><code>MsgAlert(&quot;Hello World&quot;)</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">  &lt;h1&gt;Hello World&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  alert( &#39;Hello World&#39; );</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;Hello World&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>E por aí vai!!</p>
]]></content>
      <categories>
        <category>Programação</category>
      </categories>
      <tags>
        <tag>CASUAL</tag>
      </tags>
  </entry>
</search>
